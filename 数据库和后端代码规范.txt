
一、数据库要求:
1.数据库统一由“OMS”+业务模块缩写+具体模块名称，之间使用下划线“_”分隔
     例如：因公出国境申请表 OMS_PUB_APPLY
           因私出国境申请表 OMS_PRI_APPLY
           干部登记备案表 OMS_REG_CADRE
2.数据库的表字段全部使用大写,表名在能大写的情况保持大写
    例如: 主键---ID,用户名---USER_NAME


二、后端代码要求
--使用项目中的文件生成实体类和mapper文件,手动解决实体类中注解引入报错问题

--接口名称规范
    查询接口名和方法名以get或者select开头,
    新增接口名和方法名以insert或者add开头,
    更新接口名和方法名以update开头,
    删除接口名和方法名以delete或者remove开头,
--post请求和get请求区分开来，使用PostMapping和GetMapping
    查询的只能使用GetMapping
    对数据库会进行操作的（表单提交保存）使用PostMapping

所有的模块建立在modules包下边
一个模块对应一个结构,例如:
com.hxoms.modules
    user----------------------用户相关模块
        controller------------用户相关的控制层(UserController.java)
        entity----------------用户相关的实体类(User.java)
        mapper----------------用户相关的dao层文件mapper接口(UserMapper)和xml(UserMapper.xml)
        service---------------用户相关的service接口(UserService.java)
            impl--------------用户相关的service接口实现类(UserServiceImpl.java)
    module
        controller
        entity
        mapper
        service
            impl
    role
        controller
        entity
        mapper
        service
            impl
    person
        controller
        entity
        mapper
        service
            impl
    具体的可以参考已有的模块结构
1.controller控制层不做具体的业务处理，也不捕获异常和抛出异常，如下:

@RestController
@RequestMapping("/workInfo")
public class WorkInfoController {

    @Autowired
    private WorkInfoService workInfoService;

    /**
     * 新增
     * @author gaozhenyuan
     * @date 2019/12/25 14:23
     */
    @PostMapping("/insertWorkInfo")
    public Result insertWorkInfo(WorkInfo workInfo) {
        return Result.success(workInfoService.insertWorkInfo(workInfo));
    }
}

2.service业务层，分为service接口和实现类，用来处理具体的业务，该层处理具体的业务，格式如下：

service接口

public interface WorkInfoService {

    /**
     * 新增我的工作
     * @author gaozhenyuan
     * @date 2019/12/25 14:23
     */
    String insertWorkInfo(WorkInfo workInfo);
}

service实现类

@Service
public class WorkInfoServiceImpl implements WorkInfoService {

    @Autowired
    private WorkInfoMapper workInfoMapper;

    @Override
    public String insertWorkInfo(WorkInfo workInfo) {
        String id = UUIDGenerator.getPrimaryKey();
        String userId = UserInfoUtil.getUserInfo().getId();
        workInfo.setId(id);
        workInfo.setUserId(userId);
        workInfo.setStatus("0");
        workInfoMapper.insert(workInfo);
        return id;
    }
}

3.dao持久层，用于数据的持久化，和数据库进行连接
主要有mapper接口和xml文件，两者都创建在mapper包中

4.异常的抛出和处理
    controller中不进行异常的处理，只进行抛出，不进行业务操作的异常都可以将其抛出，不做捕获，
    特殊情况可以捕获处理，但是也要进行抛出，例如对数据流操作时：
    try {

        //文件流的操作处理

    } catch (Exception e) {
        throw new CustomMessageException("XXXXXX");
    } finally {

        //关闭流的一些操作;

    }

5.后续增加......